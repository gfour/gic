The generalized intensional compiler
====================================

A compiler for a subset of Haskell based on the intensional transformation and
modular polymorphic defunctionalization. Under development, version 0.10.

Features:

* Separate module compilation.
* Parametric polymorphism, GADTs.
* A dataflow interpreter.
* A compiler to the rewriting logic of Maude.

See the examples under /Examples for the language features supported.

Requirements
------------

To build the compiler, you need:

* GHC 7.6
* haskell-src-exts (Language.Haskell.Exts.Syntax and Language.Haskell.Exts.Parser)
* For the C back-end:
    * GCC (with OpenMP support if the parallel runtime is enabled)
    * The Boehm-Demers-Weiser garbage collector from:
      (http://www.hpl.hp.com/personal/Hans_Boehm/gc/)
      Note: configure with --enable-parallel-mark/-DTHREAD_LOCAL_ALLOC for the parallel runtime.
    * Optional: libgmp (is the `HAS_GMP` macro is enabled) for big integers
      (the Integer data type, see `run_lar.sh`).
* For the Erlang back-end: Erlang/OTP R16 or greater.
* For the Maude back-end: Maude 2.6 and Full Maude.
* Optional: the GHC profiling libs (if HPROFILE is set in the Makefile),
  to support stack traces in the compiler executable.
* Optional: ghc-paths (if `USE_GHC` is set in the Makefile), if GHC is used as a
  front-end or for type checking.

Building the compiler
---------------------

* Change the macros `GC_INCLUDE` and `GC_LIB` in `run_libgc.sh` to point to the
  location of the Boehm-Demers-Weiser garbage collector.

* To disable type checking with the GHC API, comment out the `USE_GHC` flag in
  the Makefile.

* To build the compiler on Linux or Windows with Cygwin, run the following command
  at the top-level directory (where Main.hs is located):

    make

  To build gic in Windows without Cygwin, use buildwin.bat.

Using the compiler
------------------

To compile and run an example `Main.hs`, run:

    ./run_libgc.sh Main.hs

The result binary will be in `./a.out`. To use the GHC-based type checker, run:

    GICFLAGS="-ghc-tc" ./run_libgc.sh Main.hs

To compile and run an example `Test.hs` using the type checker of the GHC API, run:

    ./run_lar.sh -ghc-tc Test.hs

The module must have all types filled in by the user with explicit type signatures.

To display the options that can be used with `gic`, run:

    ./gic -help

Use the `newbench.sh` script to run all the benchmarks (NewBench/*.hs).

To compile a program using the OpenMP-based runtime, set the OMP environment variable:

    OMP=1 ./run_libgc.sh Fibpar.hs

Using the built-in interpreter
------------------------------

The built-in interpreter is invoked with `-e`, for example:

    ./gic -e Examples/Data/addsx.hs

This transforms the input program to a 0-order intensional one and runs it
using a warehouse for laziness.

Documentation
-------------

To generate the code documentation using haddock, run:

    make haddock

The resulting documentation is in `doc/haddock`.

Contributors
------------

* Angelos Charalambidis <a.charalambidis@di.uoa.gr>
* Georgios Fourtounis <gfour@softlab.ntua.gr>
* Nikolaos Papaspyrou <nickie@softlab.ntua.gr>
* Panos Rondogiannis <prondo@di.uoa.gr>
* Panagiotis Theofilopoulos

License
-------

The compiler is licensed under the terms of the GNU LGPL.

If the compiler is linked with libgmp or the GHC API, the restrictions of their
respective licenses apply.

Copyright 2009-2014, Georgios Fourtounis, Software Engineering Laboratory,
National Technical University of Athens.
